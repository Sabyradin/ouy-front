require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');

const { authorizeRoles } = require('./middleware/authMiddleware');
const User = require('./models/User');

const app = express();
app.use(express.json());
app.use(cors());

// MongoDB-“ì–∞ “õ–æ—Å—ã–ª—É
mongoose.connect('mongodb://localhost:27017/qazaq-ecomarket');

// –°—Ç–∞—Ç–∏–∫–∞–ª—ã“õ —Ñ–∞–π–ª–¥–∞—Ä
app.use(express.static(path.join(__dirname, 'public')));

// –ë–∞—Å—Ç—ã –±–µ—Ç
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –¢—ñ—Ä–∫–µ–ª—É
app.post('/api/users/register', async (req, res) => {
    try {
        const { name, email, phone, password, role } = req.body;

        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: '–ë“±–ª email “õ–æ–ª–¥–∞–Ω—ã–ª“ì–∞–Ω' });
        }

        const hashedPassword = await bcrypt.hash(password, 12);

        const user = new User({ name, email, phone, password: hashedPassword, role });
        await user.save();

        res.status(201).json({ message: '–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ' });
    } catch (error) {
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
    }
});

// –ö—ñ—Ä—É
app.post('/api/users/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: '“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑' });
        }

        const token = jwt.sign(
            { userId: user._id, role: user.role }, // ‚úÖ role —Ç–æ–∫–µ–Ω–≥–µ “õ–æ—Å—ã–ª–¥—ã
            process.env.JWT_SECRET || 'your-secret-key',
            { expiresIn: '1h' }
        );

        res.json({
            token,
            user: {
                _id: user._id,
                name: user.name,
                email: user.email,
                phone: user.phone,
                address: user.address,
                role: user.role
            }
        });
    } catch (error) {
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
    }
});

// –ü—Ä–æ—Ñ–∏–ª—å–¥—ñ –∂–∞“£–∞—Ä—Ç—É
app.put('/api/users/update', async (req, res) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ message: 'Token –∂–æ“õ' });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
        const userId = decoded.userId;

        const { name, email, phone, address } = req.body;

        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { name, email, phone, address },
            { new: true }
        );

        if (!updatedUser) {
            return res.status(404).json({ message: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã' });
        }

        res.json({
            message: '–ü—Ä–æ—Ñ–∏–ª—å –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã',
            user: {
                _id: updatedUser._id,
                name: updatedUser.name,
                email: updatedUser.email,
                phone: updatedUser.phone,
                address: updatedUser.address,
                role: updatedUser.role
            }
        });
    } catch (error) {
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
    }
});

// üî• –†”©–ª–º–µ–Ω “õ–æ—Ä“ì–∞–ª“ì–∞–Ω –±–µ—Ç “Ø–ª–≥—ñ—Å—ñ
app.get('/api/admin/dashboard', authorizeRoles('admin'), (req, res) => {
    res.json({ message: '–¢–µ–∫ –∞–¥–º–∏–Ω –∫”©—Ä–µ –∞–ª–∞—Ç—ã–Ω –¥–µ—Ä–µ–∫' });
});

// –°–µ—Ä–≤–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—É
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä ${PORT} –ø–æ—Ä—Ç—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã`);
});
